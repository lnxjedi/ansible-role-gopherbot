---
- name: Check brain settings
  fail:
    msg: "gopherbot_brain_key required when gopherbot_encrypt_brain is 'true'"
  when: gopherbot_encrypt_brain and gopherbot_brain_key is not defined
- name: Create Gopherbot history directory
  file:
    path: "{{ gopherbot_history_directory }}"
    state: directory
    owner: "{{ gopherbot_user }}"
    group: "{{ gopherbot_group }}"
    mode: 0750
- name: Create Gopherbot file brain directory
  file:
    path: "{{ gopherbot_brain_directory }}"
    state: directory
    owner: "{{ gopherbot_user }}"
    group: "{{ gopherbot_group }}"
    mode: 0750
- name: Create Gopherbot WorkSpace
  file:
    path: "{{ gopherbot_workspace_directory }}"
    state: directory
    owner: "{{ gopherbot_user }}"
    group: "{{ gopherbot_group }}"
    mode: 0750
- name: Ensure Gopherbot config directory exists
  file:
    path: "{{ gopherbot_config_directory }}"
    state: directory
    owner: "{{ gopherbot_user }}"
    group: "{{ gopherbot_group }}"
    mode: 0750
- name: Install EPEL for jq
  yum: name=epel-release
  when: ansible_distribution == "CentOS"
- name: Install required packages
  yum:
    name:
    - unzip
    - jq
    - ruby
    - python
    - git
- stat:
    path: "{{ gopherbot_install_directory }}/lib"
  register: gopher_lib
- name: Download Gopherbot archive
  unarchive:
    src: "{{ gopherbot_archive }}"
    dest: "{{ gopherbot_install_dir }}"
    owner: "{{ gopherbot_user }}"
    group: "{{ gopherbot_group }}"
    mode: 0750
    remote_src: yes
  when: gopherbot_force_update or gopher_lib.stat.isdir is not defined
  register: gopher_install
- name: Install gopherbot.yaml
  template:
    src: gopherbot_yaml.j2
    dest: "{{ gopherbot_install_dir }}/conf/gopherbot.yaml"
    owner: "{{ gopherbot_user }}"
    group: "{{ gopherbot_group }}"
    mode: 0640
- name: Add systemd unit file for Gopherbot
  template:
    src: gopherbot_service.j2
    dest: /etc/systemd/system/{{ gopherbot_service_name }}.service
    owner: root
    group: root
    mode: 0640
  register: unit
- name: Make sure Gopherbot runs on startup
  systemd: daemon_reload=yes name={{ gopherbot_service_name }} state=started enabled=yes
  when: unit.changed
- name: Restart Gopherbot
  systemd: name={{ gopherbot_service_name }} state=restarted
  when: gopher_install.changed or unit.changed
